#!/usr/bin/env ruby

require 'uri'
require 'aurora'
require 'yaml'

uri = URI.parse(ARGV[0])

args = if uri.scheme == "telnet" || uri.scheme == "rfc2217"
  require 'net/telnet/rfc2217'
  [Net::Telnet::RFC2217.new('Host' => uri.host,
    'Port' => uri.port || 23,
    'baud' => 19200,
    'parity' => Net::Telnet::RFC2217::EVEN)]
else
  [uri.path, 19200, parity: SerialPort::EVEN]
end

port = ARGV[1]&.to_i || 502

server1 = ModBus::RTUServer.new(*args)
server1.debug = true
# AID Tool queries slave 1, AWL queries slave 2; just use both
slave1 = server1.with_slave(1)
slave2 = server1.with_slave(2)
server2 = ModBus::TCPServer.new(port)
slave255 = server2.with_slave(255)

r = slave1.holding_registers = slave2.holding_registers = slave255.holding_registers = Array.new(31473, 0)

# prepopulate some data
registers = YAML.load(File.read(File.expand_path('../registers.yml', __FILE__)))
registers.each { |(k, v)| r[k] = v }

server1.request_callback = ->(uid, func, req) do
  if func == 68
    puts "===== no idea to #{uid}: #{req.inspect}"
  elsif func == 67
    puts "===== write discontiguous registers to #{uid}:"
    registers = req.map { |p| [p[:addr], p[:val]] }.to_h
    puts Aurora.print_registers(registers)
  elsif func == 16
    puts "===== write multiple registers to #{uid}:"
    registers = Range.new(req[:addr], req[:addr] + req[:quant] - 1).zip(req[:val]).to_h
    puts Aurora.print_registers(registers)
  elsif [3, 65, 66].include?(func)
  else
    puts "**** new func #{func}"
  end
end

server1.response_callback = ->(uid, func, res, req) do
  if func == 3 && res.is_a?(Array) && req
    unless req[:quant] == res.length
      puts "wrong number of results"
      next
    end
    puts "===== read registers from #{uid}"
    registers = Range.new(req[:addr], req[:addr] + req[:quant], true).to_a.zip(res).to_h
    puts Aurora.print_registers(registers)
  elsif func == 65 && res.is_a?(Array) && req
    register_list = []
    req.each { |params| register_list.concat(Range.new(params[:addr], params[:addr] + params[:quant], true).to_a) }
    unless register_list.length == res.length
      puts "wrong number of results"
      next
    end
    puts "===== read multiple register ranges from #{uid}"
    result = register_list.zip(res).to_h
    puts Aurora.print_registers(result)
  elsif func == 66 && res.is_a?(Array) && req
    unless req.length == res.length
      puts "wrong number of results"
      next
    end
    puts "===== read discontiguous registers from #{uid}"
    registers = req.zip(res).to_h
    puts Aurora.print_registers(registers)
  elsif [16, 67, 68].include?(func)
  else
    puts "**** new func #{func}"
  end
end

server2.start
server1.send(:serve, server1.instance_variable_get(:@sp))
#server1.start
loop {}
