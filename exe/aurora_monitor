#!/usr/bin/env ruby
# frozen_string_literal: true

require "aurora"
require "logger"
require "optparse"
require "socket"
require "uri"

diff_only = debug_modbus = ignore_awl_heartbeat = ignore_sensors = false

options = OptionParser.new do |opts|
  opts.banner = "Usage: aurora_monitor /path/to/serial/port [options]"

  opts.on("-q",
          "--quiet",
          "Enables quiet mode (--diff-only, --ignore-awl-heartbeat, --ignore-sensors) to ease in deciphering new registers") do # rubocop:disable Layout/LineLength
    diff_only = true
    ignore_awl_heartbeat = true
    ignore_sensors = true
  end
  opts.on("--diff-only", "Only show registers if they've changed from their previous value") { diff_only = true }
  opts.on("--debug-modbus", "Print actual protocol bytes") { debug_modbus = true }
  opts.on("--ignore-awl-heartbeat", "Don't print AWL heartbeat requests") { ignore_awl_heartbeat = true }
  opts.on("--ignore-sensors", "Don't print sensor registers (i.e. because they change a lot)") { ignore_sensors = true }
  opts.on("-v", "--version", "Print version") do
    puts Aurora::VERSION
    exit
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

options.parse!

unless ARGV.length == 1
  puts options
  exit 1
end

uri = URI.parse(ARGV[0])

last_registers = {}

SENSOR_REGISTERS = [16,
                    19,
                    20,
                    740,
                    900,
                    901,
                    903,
                    908,
                    909,
                    1109,
                    1105,
                    1106,
                    1107,
                    1108,
                    1110,
                    1111,
                    1114,
                    1117,
                    1134,
                    1148,
                    1149,
                    1150,
                    1151,
                    1152,
                    1153,
                    1164,
                    1165,
                    3326,
                    3330].freeze

io = case uri.scheme
     when "tcp"
       require "socket"
       TCPSocket.new(uri.host, uri.port)
     when "telnet", "rfc2217"
       require "net/telnet/rfc2217"
       Net::Telnet::RFC2217.new(uri.host,
                                port: uri.port || 23,
                                baud: 19_200,
                                parity: :even)
     else
       require "ccutrer-serialport"
       CCutrer::SerialPort.new(uri.path, baud: 19_200, parity: :even)
     end

server = ModBus::RTUServer.new(io)
server.promiscuous = true
server.logger = Logger.new($stdout)
server.logger.level = debug_modbus ? :debug : :warn

diff_and_print = lambda do |registers|
  registers = registers.slice(*(registers.keys - SENSOR_REGISTERS)) if ignore_sensors
  next puts Aurora.print_registers(registers) unless diff_only

  new_registers = last_registers.merge(registers)
  diff = Aurora.diff_registers(last_registers, new_registers)
  unless diff.empty?
    puts "#{Time.now} ===== read"
    puts Aurora.print_registers(diff)
  end
  last_registers = new_registers
end

server.request_callback = lambda do |uid, func, req|
  if func == 6
    puts "#{Time.now} ===== write register to #{uid}:"
    registers = { req[:addr] => req[:val] }
    puts Aurora.print_registers(registers)
  elsif func == 68
    puts "#{Time.now} ===== no idea to #{uid}: #{req.inspect}" unless diff_only
  elsif func == 67
    puts "#{Time.now} ===== write discontiguous registers to #{uid}:"
    registers = req.map { |p| [p[:addr], p[:val]] }.to_h
    puts Aurora.print_registers(registers)
  elsif func == 16
    registers = Range.new(req[:addr], req[:addr] + req[:quant] - 1).zip(req[:val]).to_h
    if ignore_awl_heartbeat && [{ 460 => 102, 461 => 0, 462 => 5 },
                                { 460 => 102, 461 => 0, 462 => 1 }].include?(registers)
      next
    end

    puts "#{Time.now} ===== write multiple registers to #{uid}:"
    puts Aurora.print_registers(registers)
  elsif [3, 65, 66].include?(func)
    # no output
  else
    puts "#{Time.now} **** new func #{func}"
  end
end

server.response_callback = lambda do |uid, func, res, req|
  if func == 3 && res.is_a?(Array) && req
    unless req[:quant] == res.length
      puts "wrong number of results"
      next
    end
    puts "#{Time.now} ===== read registers from #{uid}" unless diff_only
    registers = Range.new(req[:addr], req[:addr] + req[:quant], true).to_a.zip(res).to_h
    diff_and_print.call(registers)
  elsif func == 65 && res.is_a?(Array) && req
    register_list = []
    req.each { |params| register_list.concat(Range.new(params[:addr], params[:addr] + params[:quant], true).to_a) }
    unless register_list.length == res.length
      puts "wrong number of results"
      next
    end
    puts "#{Time.now} ===== read multiple register ranges from #{uid}" unless diff_only
    result = register_list.zip(res).to_h
    diff_and_print.call(result)
  elsif func == 66 && res.is_a?(Array) && req
    unless req.length == res.length
      puts "wrong number of results"
      next
    end
    puts "#{Time.now} ===== read discontiguous registers from #{uid}" unless diff_only
    registers = req.zip(res).to_h
    diff_and_print.call(registers)
  elsif [6, 16, 67, 68].include?(func)
    # no output
  else
    puts "#{Time.now} **** new func #{func}"
  end
end

server.send(:serve, server.instance_variable_get(:@sp))
loop { nil }
