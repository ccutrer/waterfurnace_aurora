#!/usr/bin/env ruby
# frozen_string_literal: true

require "aurora"
require "homie-mqtt"
require "ccutrer-serialport"
require "uri"
require "optparse"
require "yaml"
require "aurora/core_ext/string"

debug_modbus = false

options = OptionParser.new do |opts|
  opts.banner = "Usage: aurora_mqtt_bridge /path/to/serial/port [options]"

  opts.on("--debug-modbus", "Print actual protocol bytes") { debug_modbus = true }
  opts.on("-v", "--version", "Print version") do
    puts Aurora::VERSION
    exit
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

options.parse!

unless ARGV.length == 2
  puts options
  exit 1
end

mqtt_uri = ARGV[1]

abc = Aurora::ABCClient.new(ARGV[0])
abc.modbus_slave.logger = Logger.new($stdout)
abc.modbus_slave.logger.level = debug_modbus ? :debug : :warn

class MQTTBridge
  def initialize(abc, homie)
    @abc = abc
    @homie = homie
    @mutex = Mutex.new

    @homie.out_of_band_topic_proc = lambda do |topic, value|
      @mutex.synchronize do
        case topic
        when /\$modbus$/
          registers = @abc.query_registers(value)
          Aurora.print_registers(registers) do |register, v|
            @homie.mqtt.publish("#{@homie.topic}/$modbus/#{register}", v, qos: 1)
          end
        when %r{\$modbus/getregs}
          query_id, query = value.split(":")
          queries = query.split(";").map do |range|
            start, length = range.split(",").map(&:to_i)
            next start if length.nil?

            start...(start + length)
          end
          registers = @abc.modbus_slave.read_multiple_holding_registers(*queries)
          result = registers.values.join(",")
          @homie.mqtt.publish("#{@homie.topic}/$modbus/getregs/response",
                              "#{query_id}:#{result}", qos: 1)
        when %r{\$modbus/(\d+)/set$}
          register = $1.to_i
          value = case value
                  when /\d+/
                    value.to_i
                  when /0x(\d+)/
                    $1.to_i(16)
                  end
          @abc.modbus_slave.holding_registers[register] = value if value
          registers = { register => @abc.modbus_slave.holding_registers[register] }
          Aurora.print_registers(registers) do |r, v|
            @homie.mqtt.publish("#{@homie.topic}/$modbus/#{r}", v, qos: 1)
          end
        end
      end
    rescue StandardError => e
      warn "failed processing message: #{e}\n#{e.backtrace}"
    end

    @abc.refresh
    publish_basic_attributes

    loop do
      begin
        @mutex.synchronize do
          @abc.refresh

          components = { @homie_abc => @abc,
                         @compressor => @abc.compressor,
                         @blower => @abc.blower,
                         @pump => @abc.pump,
                         @dhw => @abc.dhw,
                         @humidistat => @abc.humidistat }.compact
          @abc.zones.each_with_index do |z, idx|
            homie_zone = @homie["zone#{idx + 1}"]
            components[homie_zone] = z
          end

          components.each do |(node, object)|
            node.each do |property|
              property.value = object.public_send(property.id.tr("-", "_"))
            end
          end

          @abc.faults.each_with_index do |fault_count, i|
            next if fault_count == 0xffff

            @faults["e#{i + 1}"].value = fault_count
          end
        end
      rescue => e
        warn "got garbage: #{e}; #{e.backtrace}"
        exit 1
      end
      sleep(5)
    end
  end

  def publish_basic_attributes
    @homie_abc = @homie.node("abc", "Aurora Basic Control", "ABC") do |node|
      allowed_modes = %w[lockout standby blower heating cooling eh1 eh2 emergency waiting]
      allowed_modes << "dehumidify" if @abc.compressor.is_a?(Aurora::Compressor::VSDrive)
      node.property("current-mode", "Current Heating/Cooling Mode", :enum, @abc.current_mode,
                    format: allowed_modes)
      node.property("entering-air-temperature", "Entering Air Temperature", :float, @abc.entering_air_temperature,
                    unit: "°F")
      node.property("entering-water-temperature", "Entering Water Temperature", :float,
                    @abc.entering_water_temperature, unit: "°F")
      node.property("leaving-air-temperature", "Leaving Air Temperature", :float, @abc.leaving_air_temperature,
                    unit: "°F")
      node.property("leaving-water-temperature", "Leaving Water Temperature", :float, @abc.leaving_water_temperature,
                    unit: "°F")
      unless @abc.outdoor_temperature.zero? # TODO: figure out the config if this actually exists
        node.property("outdoor-temperature", "Outdoor Temperature", :float, @abc.outdoor_temperature, unit: "°F")
      end

      node.property("fp1", "FP1 Sensor", :float, @abc.fp1, unit: "°F")
      node.property("fp2", "FP2 Sensor", :float, @abc.fp2, unit: "°F")
      %i[aux_heat total].each do |component|
        component = "#{component}_watts"
        node.property(component.tr("_", "-"), component.tr("_", " ").titleize, :integer,
                      @abc.public_send(component), unit: "W")
      end
    end

    @compressor = @homie.node("compressor", "Compressor", @abc.compressor.type) do |node|
      node.property("speed", "Current compressor speed", :integer, @abc.compressor.speed,
                    format: @abc.compressor.speed_range)
      node.property("watts", "Energy Usage", :integer, @abc.compressor.watts, unit: "W") if @abc.energy_monitoring?

      next unless @abc.compressor.is_a?(Aurora::Compressor::VSDrive)

      node.property("ambient-temperature", "Compressor ambient temperature", :float,
                    @abc.compressor.ambient_temperature, unit: "°F")

      next unless @abc.iz2?

      node.property("iz2-desired-speed", "IZ2 Desired Speed", :integer, @abc.compressor.iz2_desired_speed,
                    format: 0..12)
    end

    @blower = @homie.node("blower", "Blower", @abc.blower.type) do |node|
      node.property("running", "Blower is running", :boolean, @abc.blower.running?)
      if @abc.blower.respond_to?(:speed)
        node.property("speed", "Current blower speed", :integer, @abc.blower.speed, format: @abc.blower.speed_range)
      end
      node.property("watts", "Energy Usage", :integer, @abc.blower.watts, unit: "W") if @abc.energy_monitoring?

      next unless @abc.blower.is_a?(Aurora::Blower::ECM)

      presets = %w[blower-only aux-heat]
      presets.concat %w[low-compressor high-compressor] unless @abc.iz2?
      presets.each do |setting|
        field = "#{setting.tr('-', '_')}_speed"
        node.property("#{setting}-speed", "#{setting.tr('-', ' ').titleize} Preset Speed", :integer,
                      @abc.blower.public_send(field), format: 1..12) do |value, property|
          @mutex.synchronize { property.value = @abc.blower.public_send("#{field}=", value) }
        end
      end

      next unless @abc.iz2?

      node.property("iz2-desired-speed", "IZ2 Desired Speed", :integer, @abc.blower.iz2_desired_speed,
                    format: 0..100, unit: "%")
    end

    @pump = @homie.node("pump", "Loop Pump", @abc.pump.type) do |node|
      node.property("waterflow", "Waterflow", :float, @abc.pump.waterflow, unit: "gpm")
      node.property("watts", "Energy Usage", :integer, @abc.pump.watts, unit: "W") if @abc.energy_monitoring?

      next unless @abc.pump.is_a?(Aurora::Pump::VSPump)

      node.property("running", "Pump is running", :boolean, @abc.pump.running)
      node.property("speed", "Speed", :integer, @abc.pump.speed, format: 0..100, unit: "%") do |value, property|
        @mutex.synchronize { property.value = @abc.pump.speed = value }
      end
      node.property("manual-control", "If manual control is enabled", :boolean,
                    @abc.pump.manual_control?) do |value, property|
        @mutex.synchronize { property.value = @abc.pump.manual_control = value }
      end
      node.property("minimum-speed", "Speed pump runs at compressor speed 0", :integer, @abc.pump.minimum_speed,
                    format: 0..100, unit: "%") do |value, property|
        @mutex.synchronize { property.value = @abc.pump.minimum_speed = value }
      end
      node.property("maximum-speed", "Speed pump runs at compressor speed 12", :integer, @abc.pump.minimum_speed,
                    format: 0..100, unit: "%") do |value, property|
        @mutex.synchronize { property.value = @abc.pump.maximum_speed = value }
      end
    end

    if @abc.dhw
      @dhw = @homie.node("dhw", "Domestic Hot Water Generator", "DHW") do |node|
        node.property("enabled", "Enabled", :boolean, @abc.dhw.enabled) do |value, property|
          @mutex.synchronize { property.value = @abc.dhw.enabled = value }
        end
        node.property("running", "DHW Pump is running", :boolean, @abc.dhw.running?)
        node.property("water-temperature", "Water Temperature", :float,
                      @abc.dhw.water_temperature, unit: "°F")
        node.property("set-point", "Set Point", :float, @abc.dhw.set_point, format: 100..140,
                                                                            unit: "°F") do |value, property|
          @mutex.synchronize { property.value = @abc.dhw.set_point = value }
        end
      end
    end

    @humidistat = @homie.node("humidistat", "Humidistat", "Humidistat") do |node|
      node.property("relative-humidity", "Relative Humidity", :integer, @abc.humidistat.relative_humidity,
                    unit: "%", format: 0..100)
      if @abc.humidistat.humidifier?
        node.property("humidifier-running", "Humidifier is running", :boolean, @abc.humidistat.humidifier_running?)
        node.property("humidifier-mode", "Humidifier Mode", :enum, @abc.humidistat.humidifier_mode,
                      format: %i[auto manual]) do |value, property|
          @mutex.synchronize { property.value = @abc.humidistat.humidifier_mode = value.to_sym }
        end
        node.property("humidification-target", "Humidification target relative humidity", :integer,
                      @abc.humidistat.humidification_target, unit: "%", format: 15..50) do |value, property|
          @mutex.synchronize { property.value = @abc.humidistat.humidification_target = value }
        end
      end

      # VSDrive can perform active dehumidification, even without a dedicated dehumidifier
      if @abc.humidistat.dehumidifier? || @abc.compressor.is_a?(Aurora::Compressor::VSDrive)
        node.property("dehumidifier-mode", "Dehumidifier Mode", :enum, @abc.humidistat.dehumidifier_mode,
                      format: %i[auto manual]) do |value, property|
          @mutex.synchronize { property.value = @abc.humidistat.dehumidifier_mode = value.to_sym }
        end
        node.property("dehumidification-target", "Dehumidification target relative humidity", :integer,
                      @abc.humidistat.dehumidification_target, unit: "%", format: 35..65) do |value, property|
          @mutex.synchronize { property.value = @abc.humidistat.dehumidification_target = value }
        end
      end

      next unless @abc.humidistat.dehumidifier?

      node.property("dehumidifier-running", "Dehumidifier is running", :boolean, @abc.humidistat.dehumidifier_running?)
    end

    @faults = @homie.node("faults", "Fault History", "ABC") do |node|
      node.property("clear-history", "Reset fault counts", :enum, retained: false, format: "clear") do |_|
        @mutex.synchronize { @abc.clear_fault_history }
      end
      @abc.faults.each_with_index do |count, i|
        next if count == 0xffff

        name = Aurora::FAULTS[i + 1]
        node.property("e#{i + 1}", name || "E#{i + 1}", :integer, count)
      end
    end

    @abc.zones.each_with_index do |zone, i|
      type = zone.is_a?(Aurora::IZ2Zone) ? "IntelliZone 2 Zone" : "Thermostat"
      @homie.node("zone#{i + 1}", "Zone #{i + 1}", type) do |node|
        allowed_modes = %w[off auto cool heat]
        allowed_modes << "eheat" if i.zero?
        node.property("target-mode", "Target Heating/Cooling Mode", :enum, zone.target_mode,
                      format: allowed_modes) do |value, property|
          @mutex.synchronize { property.value = zone.target_mode = value.to_sym }
        end
        node.property("current-mode", "Current Heating/Cooling Mode Requested", :enum, zone.current_mode,
                      format: %w[standby h1 h2 h3 c1 c2])
        node.property("target-fan-mode", "Target Fan Mode", :enum, zone.target_fan_mode,
                      format: %w[auto continuous intermittent]) do |value, property|
          @mutex.synchronize { property.value = zone.target_fan_mode = value.to_sym }
        end
        node.property("fan-intermittent-on", "Fan Intermittent Mode On Duration", :enum, zone.fan_intermittent_on,
                      unit: "M", format: %w[0 5 10 15 20]) do |value, property|
          @mutex.synchronize { property.value = zone.fan_intermittent_on = value.to_i }
        end
        node.property("fan-intermittent-off", "Fan Intermittent Mode Off Duration", :enum, zone.fan_intermittent_on,
                      unit: "M", format: %w[0 5 10 15 20 25 30 35 40]) do |value, property|
          @mutex.synchronize { property.value = zone.fan_intermittent_on = value.to_i }
        end
        node.property("current-fan-mode", "Current Fan Status", :boolean, zone.current_fan_mode)
        if zone.is_a?(Aurora::IZ2Zone)
          node.property("priority", "Zone Priority", :enum, zone.priority, format: %w[economy comfort])
          node.property("size", "Size", :enum, zone.size, format: %w[0 25 45 70])
          node.property("normalized-size", "Normalized Size", :integer, zone.normalized_size, unit: "%", format: 0..100)
        end
        node.property("ambient-temperature", "Ambient Temperature", :float, zone.ambient_temperature, unit: "°F")
        node.property("heating-target-temperature", "Heating Target Temperature", :integer,
                      zone.heating_target_temperature, unit: "°F", format: 40..90) do |value, property|
          @mutex.synchronize { property.value = zone.heating_target_temperature = value }
        end
        node.property("cooling-target-temperature", "Cooling Target Temperature", :integer,
                      zone.cooling_target_temperature, unit: "°F", format: 54..99) do |value, property|
          @mutex.synchronize { property.value = zone.cooling_target_temperature = value }
        end
      end
    end

    # direct access to modbus registers for debugging purposes
    @homie.mqtt.subscribe("#{@homie.topic}/$modbus")
    @homie.mqtt.subscribe("#{@homie.topic}/$modbus/getregs")
    @homie.mqtt.subscribe("#{@homie.topic}/$modbus/+/set")
    @homie.publish
  end
end

log_level = ARGV.include?("--debug") ? :debug : :warn
logger = Logger.new($stdout)
logger.level = log_level
abc.modbus_slave.logger = logger

device = "aurora-#{abc.serial_number}"
homie = MQTT::Homie::Device.new(device, "Aurora MQTT Bridge", mqtt: mqtt_uri)
homie.logger = logger

MQTTBridge.new(abc, homie)
