#!/usr/bin/env ruby
# frozen_string_literal: true

require "aurora"
require "ccutrer-serialport"
require "logger"
require "optparse"
require "uri"
require "yaml"

debug_modbus = yaml = false
try_individual = nil

options = OptionParser.new do |opts|
  opts.banner = "Usage: aurora_fetch /path/to/serial/port REGISTERS [options]"

  opts.separator("")
  opts.separator("Use `known` to fetch all identified registers. Use `valid` to fetch all registers that will respond.")
  opts.separator("")

  opts.on("--debug-modbus", "Print actual protocol bytes") { debug_modbus = true }
  opts.on("--[no-]try-individual",
          "Query registers one-by-one if a range has an illegal address. " \
          "Defaults to true for `valid` and `known` special registers, false otherwise.") { |v| try_individual = v }
  opts.on("-y", "--yaml", "Output raw values as YAML") { yaml = true }
  opts.on("-v", "--version", "Print version") do
    puts Aurora::VERSION
    exit
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

options.parse!

unless ARGV.length == 2
  puts options
  exit 1
end

modbus_slave = Aurora::ABCClient.open_modbus_slave(ARGV[0])
modbus_slave.read_retry_timeout = 15
modbus_slave.read_retries = 2
modbus_slave.logger = Logger.new($stdout)
modbus_slave.logger.level = debug_modbus ? :debug : :warn

registers = Aurora::ABCClient.query_registers(modbus_slave, ARGV[1], try_individual: try_individual)

if yaml
  puts YAML.dump(registers)
else
  puts Aurora.print_registers(registers)
end
