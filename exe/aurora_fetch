#!/usr/bin/env ruby
# frozen_string_literal: true

require "aurora"
require "ccutrer-serialport"
require "logger"
require "optparse"
require "uri"
require "yaml"

debug_modbus = yaml = false

options = OptionParser.new do |opts|
  opts.banner = "Usage: aurora_fetch /path/to/serial/port REGISTERS [options]"

  opts.on("--debug-modbus", "Print actual protocol bytes") { debug_modbus = true }
  opts.on("-y", "--yaml", "Output raw values as YAML") { yaml = true }
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

options.parse!

unless ARGV.length == 2
  puts options
  exit 1
end

uri = URI.parse(ARGV[0])

args = case uri.scheme
       when "tcp"
         require "socket"
         [TCPSocket.new(uri.host, uri.port)]
       when "telnet", "rfc2217"
         require "net/telnet/rfc2217"
         [Net::Telnet::RFC2217.new(uri.host,
                                   port: uri.port || 23,
                                   baud: 19_200,
                                   parity: :even)]
       else
         [CCutrer::SerialPort.new(uri.path, baud: 19_200, parity: :even)]
       end

client = ModBus::RTUClient.new(*args)
client.logger = Logger.new($stdout)
client.logger.level = debug_modbus ? :debug : :warn

slave = client.with_slave(1)
abc = Aurora::ABCClient.new(slave)
registers = abc.query_registers(ARGV[1])

if yaml
  puts YAML.dump(registers)
else
  puts Aurora.print_registers(registers)
end
